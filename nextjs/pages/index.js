import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useEffect} from 'react'
import useSWR from 'swr';
import Pusher from 'pusher-js';
import { getURL, classNames } from '../utils/helpers';
import { SignalIcon, CommandLineIcon } from "@heroicons/react/24/outline";

import Avatar from '../components/Avatar';
import EventList from '../components/EventList';
import EventBroadcast from '../components/EventBroadcast';

const initconnections = [
  {
    chipId: '1',
    chipName: 'Chip 1',
    status: 'online',
    triggerAction: 'test-action',
    UserTriggererId: 'user-name',
    UserCheckpoint: 'user-checkpoint',
    EventMessage: 'test message'
  } ]

  const tabs = [
    { name: 'Events', href: '#', current: true },
    { name: 'Connections', href: '#', current: false },
  ]

export default function Home() {
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(false)
  const [connections, setConnections] = useState(initconnections);
  let allMembers = [];

    useEffect(() => {
      setLoading(true)
      fetch('https://mint.ideafablabs.com/index.php/wp-json/mint/v1/users')
        .then((res) => res.json())
        .then((data) => {
          setData(data)
          setLoading(false)
        })
        Pusher.logToConsole = true;

        const pusher = new Pusher('01a52d68bccce5e260bd', {
            cluster: 'us3'
        });

        const channel = pusher.subscribe('partymechanics');

      //   channel.bind("pusher:subscription_succeeded", (members) => {
      //     members.each((member) => setConnections(member.id))
      //     console.log('test')
      //     console.log(members)
      // });
        channel.bind("pusher:member_added", (member) => {
          console.log(member)
          setConnections(member.id)
      });
        // channel.bind("pusher:member_removed", (member) => {
        //   const userEl = document.getElementById("user_" + member.id);
        //   userEl.parentNode.removeChild(userEl);
        // });
    }, [])

  if (isLoading) return <p>Loading...</p>
  if (!data) return <p>No Data</p>

  return (
    <div className={styles.container}>
      <Head>
        <title>Party Mechanics NFC Readers</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className="mx-auto max-w-2xl lg:text-center">
          <h2 className="text-lg font-semibold leading-8 tracking-tight text-sky-600">Connect</h2>
          <p className="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
            Party Mechanics
          </p>
          <p className="mt-6 text-sm leading-6 text-gray-600">
            Websockets Connections from ESPs<br/>
            app_id = "1519191"<br/>
key = "01a52d68bccce5e260bd"<br/>
secret = "2bcc41fd04af3fa546a8"<br/>
cluster = "us3"<br/>
          </p>
        </div>
        <div className="mx-auto max-w-3xl sm:px-6  lg:gap-8 lg:px-8">
            <div className="lg:col-span-9 xl:col-span-6">
              <div className="px-4 sm:px-0">
                <div className="sm:hidden">
                  <label htmlFor="events-tabs" className="sr-only">
                    Select a tab
                  </label>
                  <select
                    id="events-tabs"
                    className="block w-full rounded-md border-gray-300 text-base font-medium text-gray-900 shadow-sm focus:border-sky-500 focus:ring-sky-500"
                    defaultValue={tabs.find((tab) => tab.current).name}
                  >
                    {tabs.map((tab) => (
                      <option key={tab.name}>{tab.name}</option>
                    ))}
                  </select>
                </div>
                <div className="hidden sm:block">
                  <nav className="isolate flex divide-x divide-gray-200 rounded-lg shadow" aria-label="Tabs">
                    {tabs.map((tab, tabIdx) => (
                      <a
                        key={tab.name}
                        href={tab.href}
                        aria-current={tab.current ? 'page' : undefined}
                        className={classNames(
                          tab.current ? 'text-gray-900' : 'text-gray-500 hover:text-gray-700',
                          tabIdx === 0 ? 'rounded-l-lg' : '',
                          tabIdx === tabs.length - 1 ? 'rounded-r-lg' : '',
                          'group relative min-w-0 flex-1 overflow-hidden bg-white py-4 px-6 text-sm font-medium text-center hover:bg-gray-50 focus:z-10'
                        )}
                      >
                        <span>{tab.name}</span>
                        <span
                          aria-hidden="true"
                          className={classNames(
                            tab.current ? 'bg-sky-500' : 'bg-transparent',
                            'absolute inset-x-0 bottom-0 h-0.5'
                          )}
                        />
                      </a>
                    ))}
                  </nav>
                </div>
              </div>
              <div className="mt-4">
                <h1 className="sr-only">Recent Events</h1>
                <EventList/>
              </div>
            </div>
            <aside className="hidden xl:col-span-4 xl:block">
              <EventBroadcast/> 
            </aside>
          </div>
        {/* <div className="d-flex flex-column align-items-stretch flex-shrink-0 bg-white">
          <div className="list-group list-group-flush border-bottom scrollarea">
            {messages.map(message => {
              return (
                <div className="list-group-item list-group-item-action py-3 lh-tight">
                  <div className="d-flex w-100 align-items-center justify-content-between">
                      <strong className="mb-1">{message.username}</strong>
                  </div>
                  <div className="col-10 mb-1 small">{message.message}</div>
                </div>
              )
            })}
          </div>
        </div> */}
        <ul
          role="list"
          className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
        >
          {connections.map((device) => (
            <li
              key={device.chipId}
              className="col-span-1 divide-y divide-gray-200 bg-white shadow min-w-300"
            >
              <div className="flex w-full items-center justify-between space-x-6 p-6">
              <Avatar/>
                <div className="flex-1 truncate">
                  <div className="flex items-center space-x-3">
                    <h3 className="truncate text-sm font-medium text-gray-900">
                      {device.chipName}
                    </h3>
                    <span className="inline-block flex-shrink-0 rounded-full bg-green-100 px-2 py-0.5 text-xs font-medium text-green-800">
                      {device.triggerAction}
                    </span>
                  </div>
                  <p className="mt-1 truncate text-sm text-gray-500">
                    {device.EventMessage}
                    {device.UserCheckpoint}
                  </p>
                </div>
                
              </div>
              <div>
                <div className="-mt-px flex divide-x divide-gray-200">
                  <div className="flex w-0 flex-1">
                    <a
                      href={`mailto:${device.email}`}
                      className="relative -mr-px inline-flex w-0 flex-1 items-center justify-center border border-transparent py-4 text-sm font-medium text-gray-700 hover:text-gray-500"
                    >
                      <SignalIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                      <span className="ml-3">View Events</span>
                    </a>
                  </div>
                  <div className="-ml-px flex w-0 flex-1">
                    <a
                      href={`tel:${device.telephone}`}
                      className="relative inline-flex w-0 flex-1 items-center justify-center border border-transparent py-4 text-sm font-medium text-gray-700 hover:text-gray-500"
                    >
                      <CommandLineIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                      <span className="ml-3">View Logs</span>
                    </a>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://santacruz.ideafablabs.com/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Idea Fab Labs{' '}
          <span className={styles.logo}>
            <Image src="/ifl-favicon-sc.png" alt="Fab Lab Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
