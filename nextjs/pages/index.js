import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useEffect} from 'react'
import useSWR from 'swr';
import Pusher from 'pusher-js';
import { getURL, classNames } from '../utils/helpers';
import { SignalIcon, CommandLineIcon } from "@heroicons/react/24/outline";

import Avatar from '../components/Avatar';
import EventBroadcast from '../components/EventBroadcast';

const initconnections = [
  {
    chipId: '1',
    chipName: 'Chip 1',
    status: 'online',
    triggerAction: 'test-action',
    UserTriggererId: 'user-name',
    UserCheckpoint: 'user-checkpoint',
    EventMessage: 'test message'
  } ]

  const tabs = [
    { name: 'Connections', href: '#', current: false },
    { name: 'Events', href: '#', current: true }
  ]

export default function Home() {
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(false)
  const [connections, setConnections] = useState(initconnections);
  const [members, setMembers] = useState([]);
  const [messages, setMessages] = useState([]);
    useEffect(() => {
      setLoading(true)
      fetch('https://mint.ideafablabs.com/index.php/wp-json/mint/v1/users')
        .then((res) => res.json())
        .then((data) => {
          setData(data)
          setLoading(false)
        })
        Pusher.logToConsole = true;

        const pusher = new Pusher('01a52d68bccce5e260bd', {
            cluster: 'us3'
        });
        const channel = pusher.subscribe('partymechanics');

        channel.bind('Party_ESP_Events', function (data) {
          setMessages((currentMessages) => [...currentMessages, data]);
        });

        // pusher.get({ path: "/channels"})
        channel.bind("pusher:member_added", (data) => {
          // Method to be dispatched on trigger.
          setMembers((currentMembers) => [...currentMembers, data]);
          console.log('member_added' + + JSON.stringify(data, null, 2))
        });
        channel.bind("pusher:connection_established", (data) => {
          console.log('subscription_succeeded' + JSON.stringify(data, null, 2))
        });
        
        channel.bind("pusher:subscription_succeeded", (data) => {
          // Method to be dispatched on trigger.
          console.log('subscription_succeeded' + JSON.stringify(data, null, 2))
        });
        channel.bind("pusher:subscription_count", (data) => {
          console.log(data.subscription_count);
        });
        return () => {
          pusher.disconnect();
         };
    }, [])

  if (isLoading) return <p>Loading...</p>
  if (!data) return <p>No Data</p>

  return (
    <div className={styles.container}>
      <Head>
        <title>Party Mechanics NFC Readers</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className="mx-auto max-w-2xl lg:text-center">
          <h2 className="text-lg font-semibold leading-8 tracking-tight text-sky-600">Connect</h2>
          <p className="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
            Party Mechanics
          </p>
          <p className="mt-6 text-sm leading-6 text-gray-600">
            Websockets Connections from ESPs<br/>
            Current Connections = {connections.length}<br/>
            SocketUrl = wss://ws-us3.pusher.com/app/94b06acb67c44442887f?protocol=7&client=ESP32&version=7.0.3&protocol=5
          </p>
        </div>
        {/* <NavTabs /> */}
        <ul
          role="list"
          className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"
        >
          {connections.map((device) => (
            <li
              key={device.chipId}
              className="col-span-1 divide-y divide-gray-200 bg-white shadow min-w-300"
            >
              <div className="flex w-full items-center justify-between space-x-6 p-6">
              <Avatar/>
                <div className="flex-1 truncate">
                  <div className="flex items-center space-x-3">
                    <h3 className="truncate text-sm font-medium text-gray-900">
                      {device.chipName}
                    </h3>
                    <span className="inline-block flex-shrink-0 rounded-full bg-green-100 px-2 py-0.5 text-xs font-medium text-green-800">
                      {device.triggerAction}
                    </span>
                  </div>
                  <pre>{JSON.stringify(device, null, 2)}</pre>
                  <p className="mt-1 truncate text-sm text-gray-500">
                    {device.EventMessage}
                    {device.UserCheckpoint}
                  </p>
                </div>
                
              </div>
              <div>
                <div className="-mt-px flex divide-x divide-gray-200">
                  <div className="flex w-0 flex-1">
                    <a
                      href={`mailto:${device.email}`}
                      className="relative -mr-px inline-flex w-0 flex-1 items-center justify-center border border-transparent py-4 text-sm font-medium text-gray-700 hover:text-gray-500"
                    >
                      <SignalIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                      <span className="ml-3">View Events</span>
                    </a>
                  </div>
                  <div className="-ml-px flex w-0 flex-1">
                    <a
                      href={`tel:${device.telephone}`}
                      className="relative inline-flex w-0 flex-1 items-center justify-center border border-transparent py-4 text-sm font-medium text-gray-700 hover:text-gray-500"
                    >
                      <CommandLineIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                      <span className="ml-3">View Logs</span>
                    </a>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>

      </main>
      <div className="mt-4">
        <h1 className="sr-only">Recent Events</h1>
        <EventBroadcast/> 
        <div className="px-6 lg:px-8">
      <div className="sm:flex sm:items-center">
        <div className="sm:flex-auto">
          <h1 className="text-xl font-semibold text-gray-900">Events</h1>
          <p className="mt-2 text-sm text-gray-700">
            Events and Messages
          </p>
        </div>
      </div>
      <div className="mt-8 flow-root">
        <div className="-my-2 -mx-6 overflow-x-auto lg:-mx-8">
          <div className="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
            <table className="min-w-full divide-y divide-gray-300">
              <thead>
                <tr>
                  <th scope="col" className="py-3.5 pl-6 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0">
                    Message
                  </th>
                  <th scope="col" className="py-3.5 px-3 text-left text-sm font-semibold text-gray-900">
                    Username
                  </th>
                  {/* <th scope="col" className="py-3.5 px-3 text-left text-sm font-semibold text-gray-900">
                    Email
                  </th>
                  <th scope="col" className="py-3.5 px-3 text-left text-sm font-semibold text-gray-900">
                    Role
                  </th>
                  <th scope="col" className="relative py-3.5 pl-3 pr-6 sm:pr-0">
                    <span className="sr-only">Edit</span>
                  </th> */}
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {messages.map((message, idx) => (
                  <tr key={idx}>
                    <td className="whitespace-nowrap py-4 pl-6 pr-3 text-sm font-medium text-gray-900 sm:pl-0">
                      {message.message}
                    </td>
                    <td className="whitespace-nowrap py-4 px-3 text-sm text-gray-500">{message.username}</td>
                    {/* <td className="whitespace-nowrap py-4 px-3 text-sm text-gray-500">{person.email}</td>
                    <td className="whitespace-nowrap py-4 px-3 text-sm text-gray-500">{person.role}</td>
                    <td className="relative whitespace-nowrap py-4 pl-3 pr-6 text-right text-sm font-medium sm:pr-0">
                      <a href="#" className="text-indigo-600 hover:text-indigo-900">
                        Edit<span className="sr-only">, {person.name}</span>
                      </a>
                    </td> */}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
      </div>

      <footer className={styles.footer}>
        <a
          href="https://santacruz.ideafablabs.com/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Idea Fab Labs{' '}
          <span className={styles.logo}>
            <Image src="/ifl-favicon-sc.png" alt="Fab Lab Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
